name: Post Latest Blog from RSS to Bluesky

on:
  workflow_run:
    workflows:
      - "Schedule Posts"
      - "Pages Build and Deployment"
    types:
      - completed

  workflow_dispatch:

jobs:
  fetch-and-post:
    runs-on: ubuntu-latest

    steps:
      - name: Initial Delay
        run: |
          echo "Waiting for 1 minute before starting..."
          sleep 60

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils

      - name: Fetch Latest Blog Post
        id: fetch_post
        shell: bash
        run: |
          set -euo pipefail

          FEED_URL="https://tacticsjournal.com/feed"
          response="$(curl -sfL "$FEED_URL")"

          # Parse title/link/pubDate of the latest item
          title="$(echo "$response" | xmllint --xpath "string(//item[1]/title)" -  | tr -d '\r' | xargs)"
          url_raw="$(echo "$response" | xmllint --xpath "string(//item[1]/link)" -   | tr -d '\r' | xargs)"
          pub_raw="$(echo "$response" | xmllint --xpath "string(//item[1]/pubDate)" - | xargs)"

          # Ensure we only post if it's today's item (YYYY-MM-DD)
          pub_ymd="$(date -d "$pub_raw" +%Y-%m-%d || true)"
          today_ymd="$(date +%Y-%m-%d)"
          if [[ -z "$pub_ymd" || "$pub_ymd" != "$today_ymd" ]]; then
            echo "should_post=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Normalize/clean the URL:
          # 1) encode spaces
          # 2) enforce https
          # 3) follow redirects to final canonical URL
          url_clean="${url_raw// /%20}"
          url_clean="${url_clean//$'\n'/}"
          url_clean="${url_clean//$'\r'/}"
          url_clean="${url_clean//$'\t'/}"
          url_clean="$(echo -n "$url_clean" | xargs)"  # trim outer whitespace

          # Force https (if feed gave http)
          url_clean="${url_clean/http:\/\//https://}"

          # Resolve final URL after redirects
          final_url="$(curl -sIL -o /dev/null -w "%{url_effective}" "$url_clean" || true)"
          if [[ -z "$final_url" ]]; then
            final_url="$url_clean"
          fi

          # Re-validate: absolute https URL, no whitespace
          if [[ ! "$final_url" =~ ^https://[^[:space:]]+$ ]]; then
            echo "Resolved URL is not a strict absolute https URI: '$final_url'"
            echo "should_post=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Reachability check (2xx/3xx ok)
          http_code="$(curl -sIL -o /dev/null -w "%{http_code}" "$final_url" || true)"
          if [[ ! "$http_code" =~ ^2|3 ]]; then
            echo "Final URL not reachable (code $http_code): $final_url"
            echo "should_post=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Compose text: "Title url" and keep under ~300 chars
          max_len=300
          reserve=$(( ${#final_url} + 1 ))  # 1 space
          max_title_len=$(( max_len - reserve ))
          if (( max_title_len < 5 )); then
            echo "URL too long to compose a sensible post."
            echo "should_post=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if (( ${#title} > max_title_len )); then
            # leave room for ellipsis
            ell="â€¦"
            cut=$(( max_title_len - ${#ell} ))
            if (( cut < 1 )); then cut=1; fi
            title="${title:0:cut}${ell}"
          fi

          text="$title $final_url"

          {
            echo "should_post=true"
            echo "text<<EOF"
            echo "$text"
            echo "EOF"
            echo "rss_url=$final_url"
          } >> "$GITHUB_OUTPUT"

      # Try posting WITH preview card (external embed)
      - name: Post to Bluesky (with link preview)
        id: post_with_embed
        if: steps.fetch_post.outputs.should_post == 'true'
        continue-on-error: true
        uses: myConsciousness/bluesky-post@v5
        with:
          text: ${{ steps.fetch_post.outputs.text }}
          link-preview-url: ${{ steps.fetch_post.outputs.rss_url }}
          identifier: tacticsjournal.com
          password: ${{ secrets.BSS }}
          retry-count: 3

      # Fallback: text-only if the embed failed for any reason (e.g., Bluesky 400)
      - name: Post to Bluesky (text only fallback)
        if: steps.fetch_post.outputs.should_post == 'true' && steps.post_with_embed.outcome == 'failure'
        uses: myConsciousness/bluesky-post@v5
        with:
          text: ${{ steps.fetch_post.outputs.text }}
          identifier: tacticsjournal.com
          password: ${{ secrets.BSS }}
          retry-count: 3

      # Optional debugging
      - name: Debug Outputs
        run: |
          echo "Post text: ${{ steps.fetch_post.outputs.text }}"
          echo "Final URL: ${{ steps.fetch_post.outputs.rss_url }}"